from Person import Person  # Импорт класса
import pandas as PD  # Импорт pandas
import time  # Импорт Времени
from slovar import ID  # Импорт словаря [ФАМИЛИЯ] ---> [ID]
import random


# |--------------------------------------------------------------------------------------------------|
# |=============================================GET_DF===============================================|
# |--------------------------------------------------------------------------------------------------|


def get_DF():
    # Функция предназначена открыть БД и загрузить dataframe

    """Подгрузка Баночки Данных"""

    dataframe = PD.read_excel('dataframe.xlsx')
    return dataframe


# |--------------------------------------------------------------------------------------------------|
# |===========================================GET_DUTY_DF============================================|
# |--------------------------------------------------------------------------------------------------|


def get_duty_DF():
    # Функция предназначена открыть БД с дежурными и загрузить dataframe

    """Подгрузка второй Баночки Данных"""

    dataframe = PD.read_excel('duty_list.xlsx')
    return dataframe


# |--------------------------------------------------------------------------------------------------|
# |=======================================POST_DUTY_COUPLE_IN_DF=====================================|
# |--------------------------------------------------------------------------------------------------|


def load_couple_2_df(couple):
    duty_list = get_duty_DF()
    first = '[_]'
    second = '[_]'
    try:
        first = couple[0]
    except:
        pass

    try:
        second = couple[1]
    except:
        pass

    duty_list.loc[0, 'first'] = first
    duty_list.loc[0, 'second'] = second

    duty_list.to_excel('duty_list.xlsx', index=False)


# |--------------------------------------------------------------------------------------------------|
# |==========================================GET_META_IN_DF==========================================|
# |--------------------------------------------------------------------------------------------------|


def get_meta_in_df(id):
    # Используя dataframe берем всю информацию от студента

    """Информация из Баночки Данных"""

    df = get_DF()

    I_D = df.loc[id, 'ID']
    T_ID = df.loc[id, 'T_ID']
    Surname = df.loc[id, 'Surname']
    Name = df.loc[id, 'Name']
    Last_duty = df.loc[id, 'Last_duty']
    Count_duty = df.loc[id, 'Count_duty']

    meta = [I_D, T_ID, Surname, Name, Last_duty, Count_duty]
    return meta


# |--------------------------------------------------------------------------------------------------|
# |==========================================CREATOR_BY_ID===========================================|
# |--------------------------------------------------------------------------------------------------|


def creator_by_id(id):
    # Эта функция предусматривает создание модели ученика по его id
    # что дает возможность получая только запрос от меня в тг получить полностью
    # информацию о ученике не прибегая к БД

    """Создатель объекта 'Ученик' по id этого ученика"""

    meta = get_meta_in_df(id)
    I_D = meta[0]
    T_ID = meta[1]
    SURNAME = meta[2]
    NAME = meta[3]
    LAST_DUTY = meta[4]
    COUNT_DUTY = meta[5]
    person = Person(I_D, T_ID, SURNAME, NAME, LAST_DUTY, COUNT_DUTY)

    return person


# |--------------------------------------------------------------------------------------------------|
# |============================================MAKE_GROUP============================================|
# |--------------------------------------------------------------------------------------------------|


def make_group():
    # Создатель общей картины группы изходя из класса Person
    # Необходим для Inline-кнопок в боте

    """Создатель группы по объектам класса Person"""

    group = {}

    for i in range(23):
        person = creator_by_id(i)
        group[i] = person

    return group


# |--------------------------------------------------------------------------------------------------|
# |========================================LIST_STUDENTS_NOW=========================================|
# |--------------------------------------------------------------------------------------------------|


def list_students_now(array):
    # Создание словаря со студентами присутствующими прямо сейчас
    # По нему выстраивается модель сборки дежурных

    """Отбор присутствующих"""

    group = make_group()

    now = {}

    counter = 0

    for key in array:
        now[counter] = group[key]
        counter += 1

    return now


# |--------------------------------------------------------------------------------------------------|
# |===========================================CHECK_PIZDA============================================|
# |--------------------------------------------------------------------------------------------------|


def check_pizda(duty_couple):
    # Проверка наличия хуесосок в дежурстве

    """Устранение всякой напасти"""

    if duty_couple[0] == 'Гостюхин':
        if (duty_couple[1] == 'Лопатюк') or (duty_couple[1] == 'Ротарь'):
            return True
        else:
            return False

    elif duty_couple[1] == 'Гостюхин':
        if (duty_couple[0] == 'Лопатюк') or (duty_couple[0] == 'Ротарь'):
            return True
        else:
            return False

    elif duty_couple[0] == 'Бурлака':
        if (duty_couple[1] == 'Лопатюк') or (duty_couple[1] == 'Ротарь'):
            return True
        else:
            return False

    elif duty_couple[1] == 'Бурлака':
        if (duty_couple[0] == 'Лопатюк') or (duty_couple[0] == 'Ротарь'):
            return True
        else:
            return False

    else:
        return False


# |--------------------------------------------------------------------------------------------------|
# |========================================TAKE_DUTY_PERSONS=========================================|
# |--------------------------------------------------------------------------------------------------|


def take_duty_persons(array):
    """Создатель дежурных"""

    # Создание пары дежурных (Далее описан процесс работы)

    # Функция собирает пару дежурных исходя из их давности дежурства
    # Что значит что пара соберется из максимально давно дежуривших людей
    # Первое время пары будут свормированы хаотично, затем обретут проядок сформировавшись по группам

    # 1 - Перепись из словаря в список, использует объекты класса Person
    # 2 - Сортировка людей во времени дежурства, от БОЛЬШЕГО к меньшему
    # 3 - Проверка на случай если людей недостаточно для формирования пары
    # 4 - Проверка на случай остутсвия людей
    # 5 - Проверка наличия швали
    # 6 - Сортировка, ставит первым, объект с таким же person_id
    # 7 - Перепись массива с людьми, после изгнания нечисти
    # 8 - Перезапуск создания пары, так же после изгнания нечисти

    # добавление если человек 1
    # рандомизация выбора

    now = list_students_now(array)

    list_students = []
    sorted_people = []

    for key in range(len(now)):  # --1--
        list_students.append(now[key])

    sorted_people = sorted(list_students,
                           key=lambda person: person.last_duty,
                           reverse=False)  # --2--

    duty_couple = []

    try:
        l1 = sorted_people[0].last_duty
        l2 = sorted_people[1].last_duty
        l3 = sorted_people[2].last_duty

        if l1 == l2 and l2 == l3:
            sorted_people = sorted(sorted_people, key=lambda person: person.last_duty==l1, reverse=False)
            random.shuffle(sorted_people)
    except:
        pass

    try:  # --3--
        duty_couple.append(sorted_people[0].surname)
        duty_couple.append(sorted_people[1].surname)
    except IndexError:
        try:  # --4--
            duty_couple.append(sorted_people[0].surname)
        except IndexError:
            msg = 'Сегодня никого нет!'
            return msg

    if check_pizda(duty_couple):  # --5--
        person_id = sorted_people[1].id

        sorted_people = sorted(list_students,
                               key=lambda person2: person2.id == person_id,
                               reverse=True)  # --6--
        sorted_people.pop(0)

        array = []

        for i in range(len(sorted_people)):  # --7--
            array.append(sorted_people[i].id)

        duty_couple = take_duty_persons(array)  # --8--

    if duty_couple[0] == duty_couple[1]:
        duty_couple.pop(1)

    load_couple_2_df(duty_couple)
    return duty_couple

# |--------------------------------------------------------------------------------------------------|
# |=============================================SUCCESS==============================================|
# |--------------------------------------------------------------------------------------------------|


def success(pupil_surname):
    # Сохранение дежурных после работы, с подключением их времени дежурства и добавление 1 к дежурству

    """Успешное дежурство пары"""

    de_time = round(time.time(), 0)

    fst_id = ID[pupil_surname]

    df = get_DF()

    df.loc[fst_id, 'Last_duty'] = de_time

    df.loc[fst_id, 'Count_duty'] += 1

    df.to_excel('dataframe.xlsx', index=False)


# |--------------------------------------------------------------------------------------------------|
# |===========================================UNSUCCESS==============================================|
# |--------------------------------------------------------------------------------------------------|


def unsucces(pupil_surname):
    # Изменение порядка дежурства на случай отказа от дежурства

    """Фатальная ошибка при постановке пары"""

    de_time = int('-1')
    pupil_id = ID[pupil_surname]

    df = get_DF()

    df.loc[pupil_id, 'Last_duty'] = de_time

    df.to_excel('dataframe.xlsx', index=False)


# |--------------------------------------------------------------------------------------------------|
# |===============================================END================================================|
# |--------------------------------------------------------------------------------------------------|
